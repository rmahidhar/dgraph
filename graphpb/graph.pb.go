// Code generated by protoc-gen-go.
// source: graph.proto
// DO NOT EDIT!

/*
Package graphpb is a generated protocol buffer package.

It is generated from these files:
	graph.proto

It has these top-level messages:
	AnyValue
	Node
	Edge
	EdgeProperty
	NodeProperty
	GraphMsg
*/
package graphpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operation int32

const (
	Operation_UNKNOWN           Operation = 0
	Operation_ADD_NODE          Operation = 1
	Operation_ADD_EDGE          Operation = 2
	Operation_SET_EDGE_PROPERTY Operation = 3
	Operation_SET_NODE_PROPERTY Operation = 4
)

var Operation_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADD_NODE",
	2: "ADD_EDGE",
	3: "SET_EDGE_PROPERTY",
	4: "SET_NODE_PROPERTY",
}
var Operation_value = map[string]int32{
	"UNKNOWN":           0,
	"ADD_NODE":          1,
	"ADD_EDGE":          2,
	"SET_EDGE_PROPERTY": 3,
	"SET_NODE_PROPERTY": 4,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}
func (Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AnyValue_Type int32

const (
	AnyValue_UNKNOWN AnyValue_Type = 0
	AnyValue_INT     AnyValue_Type = 1
	AnyValue_FLOAT   AnyValue_Type = 2
	AnyValue_STRING  AnyValue_Type = 3
)

var AnyValue_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "INT",
	2: "FLOAT",
	3: "STRING",
}
var AnyValue_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"INT":     1,
	"FLOAT":   2,
	"STRING":  3,
}

func (x AnyValue_Type) String() string {
	return proto.EnumName(AnyValue_Type_name, int32(x))
}
func (AnyValue_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type AnyValue struct {
	Type      AnyValue_Type `protobuf:"varint,1,opt,name=type,enum=graphpb.AnyValue_Type" json:"type,omitempty"`
	IntVal    int32         `protobuf:"varint,2,opt,name=intVal" json:"intVal,omitempty"`
	FloatVal  float32       `protobuf:"fixed32,3,opt,name=floatVal" json:"floatVal,omitempty"`
	StringVal string        `protobuf:"bytes,4,opt,name=stringVal" json:"stringVal,omitempty"`
}

func (m *AnyValue) Reset()                    { *m = AnyValue{} }
func (m *AnyValue) String() string            { return proto.CompactTextString(m) }
func (*AnyValue) ProtoMessage()               {}
func (*AnyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Node struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Edge struct {
	SrcNode string `protobuf:"bytes,1,opt,name=srcNode" json:"srcNode,omitempty"`
	DstNode string `protobuf:"bytes,2,opt,name=dstNode" json:"dstNode,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EdgeProperty struct {
	SrcNode  string    `protobuf:"bytes,1,opt,name=srcNode" json:"srcNode,omitempty"`
	DstNode  string    `protobuf:"bytes,2,opt,name=dstNode" json:"dstNode,omitempty"`
	Property string    `protobuf:"bytes,3,opt,name=property" json:"property,omitempty"`
	Value    *AnyValue `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (m *EdgeProperty) Reset()                    { *m = EdgeProperty{} }
func (m *EdgeProperty) String() string            { return proto.CompactTextString(m) }
func (*EdgeProperty) ProtoMessage()               {}
func (*EdgeProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EdgeProperty) GetValue() *AnyValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type NodeProperty struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Property string    `protobuf:"bytes,2,opt,name=property" json:"property,omitempty"`
	Value    *AnyValue `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *NodeProperty) Reset()                    { *m = NodeProperty{} }
func (m *NodeProperty) String() string            { return proto.CompactTextString(m) }
func (*NodeProperty) ProtoMessage()               {}
func (*NodeProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeProperty) GetValue() *AnyValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type GraphMsg struct {
	Oper Operation `protobuf:"varint,1,opt,name=oper,enum=graphpb.Operation" json:"oper,omitempty"`
	Msg  []byte    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *GraphMsg) Reset()                    { *m = GraphMsg{} }
func (m *GraphMsg) String() string            { return proto.CompactTextString(m) }
func (*GraphMsg) ProtoMessage()               {}
func (*GraphMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*AnyValue)(nil), "graphpb.AnyValue")
	proto.RegisterType((*Node)(nil), "graphpb.Node")
	proto.RegisterType((*Edge)(nil), "graphpb.Edge")
	proto.RegisterType((*EdgeProperty)(nil), "graphpb.EdgeProperty")
	proto.RegisterType((*NodeProperty)(nil), "graphpb.NodeProperty")
	proto.RegisterType((*GraphMsg)(nil), "graphpb.GraphMsg")
	proto.RegisterEnum("graphpb.Operation", Operation_name, Operation_value)
	proto.RegisterEnum("graphpb.AnyValue_Type", AnyValue_Type_name, AnyValue_Type_value)
}

func init() { proto.RegisterFile("graph.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x6d, 0xbb, 0x50, 0x3a, 0x34, 0xa6, 0x4c, 0x22, 0x21, 0xc4, 0x83, 0xe9, 0x41, 0x0d,
	0x87, 0x1e, 0xe0, 0xe6, 0x8d, 0xa4, 0x95, 0x10, 0xb5, 0x25, 0x4b, 0xd5, 0x78, 0x22, 0x45, 0x6a,
	0x25, 0x81, 0xb6, 0x69, 0xab, 0x09, 0x4f, 0xe0, 0x53, 0xf9, 0x6e, 0xee, 0x2e, 0xa5, 0x84, 0xa8,
	0x31, 0xf1, 0xd6, 0x7f, 0xbe, 0x7f, 0x66, 0xb6, 0x33, 0x03, 0xcd, 0x28, 0x0b, 0xd2, 0x57, 0x2b,
	0xcd, 0x92, 0x22, 0x41, 0x55, 0x88, 0x74, 0x6e, 0x7e, 0x4a, 0xd0, 0x18, 0xc6, 0x9b, 0x87, 0x60,
	0xf5, 0x16, 0x62, 0x0f, 0x48, 0xb1, 0x49, 0xc3, 0x8e, 0x74, 0x26, 0x5d, 0x1e, 0xf7, 0xdb, 0x56,
	0x69, 0xb2, 0x76, 0x06, 0xcb, 0x67, 0x94, 0x0a, 0x0f, 0xb6, 0xa1, 0xbe, 0x8c, 0x0b, 0x16, 0xee,
	0xc8, 0xcc, 0x5d, 0xa3, 0xa5, 0xc2, 0x2e, 0x34, 0x5e, 0x56, 0x49, 0x20, 0x88, 0xc2, 0x88, 0x4c,
	0x2b, 0x8d, 0xa7, 0xa0, 0xe5, 0x45, 0xb6, 0x8c, 0x23, 0x0e, 0x09, 0x83, 0x1a, 0xdd, 0x07, 0xcc,
	0x01, 0x10, 0x5e, 0x1f, 0x9b, 0xa0, 0xde, 0xbb, 0x37, 0xae, 0xf7, 0xe8, 0x1a, 0x47, 0xa8, 0x82,
	0x32, 0x76, 0x7d, 0x43, 0x42, 0x0d, 0x6a, 0xd7, 0xb7, 0xde, 0xd0, 0x37, 0x64, 0x04, 0xa8, 0x4f,
	0x7d, 0x3a, 0x76, 0x47, 0x86, 0x62, 0x76, 0x81, 0xb8, 0xc9, 0x22, 0x44, 0x04, 0x12, 0x07, 0xeb,
	0xed, 0xd3, 0x35, 0x2a, 0xbe, 0xcd, 0x2b, 0x20, 0xce, 0x22, 0x0a, 0xb1, 0x03, 0x6a, 0x9e, 0x3d,
	0x73, 0x5b, 0x89, 0x77, 0x92, 0x93, 0x45, 0x5e, 0x08, 0x22, 0x6f, 0x49, 0x29, 0xcd, 0x0f, 0x09,
	0x74, 0x9e, 0x3c, 0xc9, 0x92, 0x34, 0xcc, 0x8a, 0xcd, 0x7f, 0x8a, 0xf0, 0x59, 0xa4, 0x65, 0xbe,
	0x98, 0x85, 0x46, 0x2b, 0x8d, 0x17, 0x50, 0x7b, 0xe7, 0x33, 0x15, 0x73, 0x68, 0xf6, 0x5b, 0xdf,
	0x86, 0x4d, 0xb7, 0xdc, 0x8c, 0x40, 0xe7, 0xc5, 0xaa, 0x87, 0xfc, 0xf0, 0xa7, 0x07, 0x8d, 0xe4,
	0xdf, 0x1a, 0x29, 0x7f, 0x34, 0xb2, 0xa1, 0x31, 0xe2, 0xe8, 0x2e, 0x8f, 0xf0, 0x1c, 0x08, 0x4f,
	0x2f, 0x2f, 0x01, 0xab, 0x1c, 0x8f, 0x05, 0x83, 0x62, 0x99, 0xc4, 0x54, 0x70, 0x34, 0x40, 0x59,
	0xe7, 0x91, 0xe8, 0xa9, 0x53, 0xfe, 0xd9, 0x9b, 0x83, 0x56, 0x99, 0x0e, 0x57, 0xa9, 0xb3, 0x4b,
	0xb3, 0xed, 0x99, 0xeb, 0xd9, 0x0e, 0xdb, 0x67, 0xa9, 0x1c, 0x7b, 0xe4, 0xb0, 0x95, 0x9e, 0x40,
	0x6b, 0xea, 0xf8, 0x42, 0xcd, 0x26, 0xd4, 0x9b, 0x38, 0xd4, 0x7f, 0x32, 0x94, 0x5d, 0x98, 0xa7,
	0xec, 0xc3, 0x64, 0x5e, 0x17, 0x47, 0x3c, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xf2, 0xfa,
	0x64, 0xd3, 0x02, 0x00, 0x00,
}
